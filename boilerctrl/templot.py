#!/usr/bin/env python3
'''
Plot temperature trend grouped by weather services.
The temperature are read from the log file generated by boilerctrl.py script:
    <%Y-%m-%d %H:%M:%S,%f>;<log_type>;<description>;<service>;<float_temperature_value>

References:

Reading and Writing CSV Files in Python
Link: https://realpython.com/python-csv/

Plotting multiple Y values against multiple X values which are different timestamps
Link: https://stackoverflow.com/a/24815396

How to show date and time on x axis in matplotlib
Link: https://stackoverflow.com/a/32973263

Creating graph with date and time in axis labels with matplotlib
Link: https://matplotlib.org/gallery/text_labels_and_annotations/date.html
      https://stackoverflow.com/a/5502162

The MIT License (MIT)

Copyright (c) 2016 Corrado Ubezio

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''
from __future__ import print_function

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from os import path
from datetime import date
from datetime import datetime
from datetime import timedelta
from csv import DictReader as csv_dict

DEFAULT_SVC = 'Wunderground'


def timedelta2string(elapsed):
    '''Convert timedelta to string
    see: https://stackoverflow.com/a/28779315

    TODO convert from local timezone to UTC:
    '''
    seconds = elapsed.days*86400 + elapsed.seconds # drop microseconds
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)
    #return "{hours:02d}:{minutes:02d}:{seconds:02d}".format(**vars())
    return "{hours:02d}:{minutes:02d}".format(**vars())


class TimeStats:
    def __init__(self):
        self.lower_bound = None
        self.upper_bound = None

        self.timespan_begin = None
        self.timespan_duration = timedelta()
    
    def range_update(self, timestamp):
        if self.lower_bound == None:
            self.lower_bound = timestamp
        self.upper_bound = timestamp
    
    def timespan_open(self, timestamp):
        self.range_update(timestamp)
        self.timespan_begin = timestamp
    
    def timespan_close(self, timestamp=None):
        self.range_update(timestamp)
        if timestamp is None:
            # force timespan_close:
            # require timespan open
            if self.timespan_begin is None:
                return
            timestamp = self.upper_bound
        if self.timespan_begin is None:
            self.timespan_begin = self.upper_bound
        self.timespan_duration += timestamp - self.timespan_begin
        self.timespan_begin = None

    def timespan_gets(self):
        return timedelta2string(self.timespan_duration)


class Weather_service_log:
    def __init__(self):
        '''Service Table: assign a tuple at each service:
            timestamp_list
            temperature_list
        '''
        self.svc_table = {}

        self.datetime_stats = TimeStats()
        self.activation_timestamp = []

        self.timeframe_begin = datetime(2015,1,1)
        self.timeframe_avg = 0.0
        self.timeframe_nsvc = 0
        self.timeframe_avg_logged = None
    
    def activation_start(self, timestamp):
        self.datetime_stats.timespan_open(timestamp)
        self.activation_timestamp.append(timestamp)

    def activation_stop(self, timestamp):
        self.datetime_stats.timespan_close(timestamp)

    def svc_update(self, svc, timestamp, temperature):
        self.datetime_stats.range_update(timestamp)
        if svc not in self.svc_table:
            # service doesn't exist: create a new entry
            self.svc_table[svc] = ([], [])  # (timestamp_list, temperature_list)
        self.svc_table[svc][0].append(timestamp)
        self.svc_table[svc][1].append(temperature)

    def timeframe_avg_chk(self, avg_log_timestamp, avg_computed):
        try:
            avg_log_idx = self.svc_table['AVERAGE'][0].index(avg_log_timestamp)
        except ValueError:
            print('AVERAGE not found at {}!'.format(avg_log_timestamp))
        else:
            avg_logged = self.svc_table['AVERAGE'][1][avg_log_idx]
            avg_delta = round( abs(avg_computed - avg_logged), 1 )
            if avg_delta > 0.1:
                print('AVERAGE: values do not match at',avg_log_timestamp)
                print('-- read {}, expected {}'.format(avg_logged, avg_computed))

    def timeframe_close(self, current_timestamp=None):
        if self.timeframe_nsvc > 0:
            self.timeframe_avg = round(self.timeframe_avg / self.timeframe_nsvc, 1)
            if self.timeframe_avg_logged is None:
                # AVERAGE has not been logged in the current timeframe:
                # save as AVERAGE service
                self.svc_update('AVERAGE',
                            self.timeframe_begin, self.timeframe_avg )
            else:
                # AVERAGE has been already logged: compare the results
                self.timeframe_avg_chk(
                            self.timeframe_avg_logged, self.timeframe_avg )
        if current_timestamp == None:
            self.timeframe_begin = datetime(2015,1,1)
        else:
            self.timeframe_begin = current_timestamp
        self.timeframe_avg_logged = None
        self.timeframe_avg = 0.0
        self.timeframe_nsvc = 0

    def timeframe_update_avg(self, timestamp, temperature):
        if timestamp > self.timeframe_begin + timedelta(minutes=2):
            # close the time frame
            self.timeframe_close(timestamp)
        self.timeframe_avg = self.timeframe_avg + temperature
        self.timeframe_nsvc = self.timeframe_nsvc + 1

    def update_temperature(self, svc, timestamp, temperature):
        self.svc_update(svc, timestamp, temperature)

        # compute the average time frame temperature
        # since the earlier version of boilerctrl.py didn't
        if svc == 'AVERAGE':
            # average time frame temperature has been already logged:
            # save timestamp and exclude from computation
            self.timeframe_avg_logged = timestamp
            return
        self.timeframe_update_avg(timestamp, temperature)

    def update_close(self):
        self.datetime_stats.timespan_close()
        self.timeframe_close()

    def plot(self, daytime, fig_title, fig_file_path):
        if len(self.svc_table) == 0:
            return False

        # Create the figure and the subplot for the temperatures line graph
        fig, ax = plt.subplots()

        # format the xaxis ticks
        if daytime is True:
            # format x-axis ticks by hours of the day
            plt.xticks(rotation='vertical')
            plt.subplots_adjust(bottom=.2)
            xfmt = mdates.DateFormatter('%H:%M')
            ax.xaxis.set_major_locator(mdates.HourLocator())
        else:
            # auto format x-axis ticks by date
            fig.autofmt_xdate()
            xfmt = mdates.DateFormatter('%Y-%m-%d')
        ax.xaxis.set_major_formatter(xfmt)

        # plot temperature
        color_idx = 0
        plot_color_set = ['green', 'brown', 'blue', 'orange']
        for svc_name in self.svc_table:
            if svc_name == 'AVERAGE':
                plot_width = 3
                plot_color = 'red'
            else:
                if daytime is not True:
                    # plot only the AVERAGE
                    continue
                plot_width = 1  # default
                plot_color = plot_color_set[color_idx]
                color_idx = (color_idx + 1) % len(plot_color_set)
            ax.plot( self.svc_table[svc_name][0], self.svc_table[svc_name][1],
                        linewidth = plot_width, color=plot_color, label=svc_name )

        if daytime is True:
            # plot a vertical line representing the activation time
            # see: https://stackoverflow.com/a/24988486
            activation_label = 'SwitchOn'
            for xc in self.activation_timestamp:
                plt.axvline(x=xc, color='magenta', label=activation_label)
                activation_label = None  # Only one legend entry for all activation plot

        ax.set(ylabel='C degrees',
            title='Switch ON duration: ' + self.datetime_stats.timespan_gets())
        ax.grid()
        ax.legend()
        fig.suptitle(fig_title, fontsize=12)
        fig.savefig(fig_file_path)
        print('Temperature plot saved in', fig_file_path)

        return True


def templot(log_file_name, plot_file_path, start_from_day, end_at_day=None):
    print('Plot from file {}'.format(log_file_name))
    date_start = datetime.strptime(start_from_day, '%Y-%m-%d').date()
    if end_at_day is None:
        date_end = date_start
        date_range_str = date_start.strftime('%Y-%m-%d')
    else:
        date_end = datetime.strptime(end_at_day, '%Y-%m-%d').date()
        date_range_str = '{}_{}'.format( date_start.strftime('%Y-%m-%d'),
                                         date_end.strftime('%Y-%m-%d') )
    plot_file_path, plot_file_ext = path.splitext(plot_file_path)
    plot_file_path = '{root}_{range}{ext}'.format( root=plot_file_path,
                                                   ext=plot_file_ext,
                                                   range=date_range_str )
    plot_title = 'Temperature of ' + date_range_str
    print(plot_title)

    svc_log = Weather_service_log()
    with open(log_file_name, mode='r') as csv_file:
        # support two temperature log line format:
        # in the older one the weather service name was not saved
        csv_fields = ['date_time', 'log_type', 'desc', 'old_temp_field', 'new_temp_field']
        for log_items in csv_dict(csv_file, fieldnames=csv_fields, delimiter=';'):
            # check the date range
            date_time = datetime.strptime(log_items["date_time"], '%Y-%m-%d %H:%M:%S,%f')
            if date_time.date() < date_start:
                continue
            if date_time.date() > date_end:
                break
            
            # search for temperature or boiler status log lines
            item_desc = log_items['desc']
            if item_desc != 'ext temp' and 'boiler goes ' not in item_desc:
                continue
            if item_desc == 'boiler goes ON':
                # save the boiler activation date time
                svc_log.activation_start(date_time)
                continue
            if item_desc == 'boiler goes OFF':
                svc_log.activation_stop(date_time)
                continue

            # get the date time of temperature disclosed by the weather service
            # fixing the log line format
            if log_items['new_temp_field'] is None:
                # old log line without weather service name
                log_temp = log_items['old_temp_field']
                svc = DEFAULT_SVC
            else:
                log_temp = log_items['new_temp_field']
                svc = log_items["old_temp_field"]
            if log_temp == '-':
                # the temperature was not disclosed
                continue
            svc_log.update_temperature(svc, date_time, float(log_temp))
    svc_log.update_close()

    if svc_log.plot(date_end == date_start, plot_title, plot_file_path) is not True:
        print('Nothing to plot in the selected period!')
        return -1
    return 0


def date_range_by_day(start_date, ndays):
    '''Generates dates, day by day, starting from `start_date`
    for `ndays`
    '''
    new_date = datetime.strptime(start_date, '%Y-%m-%d')
    day = timedelta(days=1)
    for _ in range(ndays):
        yield new_date.strftime('%Y-%m-%d')
        new_date = new_date + day


def main(argv):
    argc = len(argv)
    if argc < 4 or argc > 5:
        print('Sintax: {} <log_file_path> <plot_file_path> <start_date> [<end_date>]'
                                                .format(path.basename(argv[0])) )
        return -1

    # Set optional argument
    try:
        end_date = argv[4]
    except IndexError:
        end_date = None

    templot(argv[1], argv[2], argv[3], end_date)
    return 0


if __name__ == "__main__":
    log_file_name = 'boilerctrl-log.txt'
    plot_file_name = 'templot.png'

    script_path = path.abspath(__file__)
    working_dir = path.dirname(script_path)
    argv = [
        script_path,
        path.join(working_dir, log_file_name),
        path.join(working_dir, plot_file_name)
    ]
    main(argv + ['2019-01-14'])
    main(argv + ['2019-01-04', '2019-01-06'])
    main(argv + ['2019-01-13', '2019-01-14'])
    main(argv + ['2019-01-13'])

    # plot temperature of the last 7 days
    today = datetime(2019,1,12)
    from_date = (today - timedelta(days=7)).strftime('%Y-%m-%d')
    to_date = today.strftime('%Y-%m-%d')
    main(argv + [from_date, to_date])
 