#!/usr/bin/env python3
'''
Plot temperature trend grouped by weather services.
The temperature are read from the log file generated by boilerctrl.py script:
    <%Y-%m-%d %H:%M:%S,%f>;<log_type>;<description>;<service>;<float_temperature_value>

References:

Reading and Writing CSV Files in Python
Link: https://realpython.com/python-csv/

Plotting multiple Y values against multiple X values which are different timestamps
Link: https://stackoverflow.com/a/24815396

How to show date and time on x axis in matplotlib
Link: https://stackoverflow.com/a/32973263

Creating graph with date and time in axis labels with matplotlib
Link: https://matplotlib.org/gallery/text_labels_and_annotations/date.html
      https://stackoverflow.com/a/5502162

The MIT License (MIT)

Copyright (c) 2016 Corrado Ubezio

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''
from __future__ import print_function

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from os import path
from datetime import date
from datetime import datetime
from datetime import timedelta
from csv import DictReader as csv_dict

DEFAULT_SVC = 'Wunderground'


def templot(log_file_name, plot_file_path, start_from_day, end_at_day=None):
    print('Plot from file {}'.format(log_file_name))
    date_start = datetime.strptime(start_from_day, '%Y-%m-%d').date()
    if end_at_day is None:
        date_end = date_start
        date_range_str = date_start.strftime('%Y-%m-%d')
    else:
        date_end = datetime.strptime(end_at_day, '%Y-%m-%d').date()
        date_range_str = '{}-{}'.format( date_start.strftime('%Y-%m-%d'),
                                         date_end.strftime('%Y-%m-%d') )
    plot_file_path, plot_file_ext = path.splitext(plot_file_path)
    plot_file_path = '{root}_{range}{ext}'.format( root=plot_file_path,
                                                   ext=plot_file_ext,
                                                   range=date_range_str )
    plot_title = 'Temperature of ' + date_range_str
    print(plot_title)

    tempBySvc = {}
    activation_time = []
    timeframe_begin = datetime(2015,1,1)
    timeframe_avg_datetime_log = None
    timeframe_avg = 0.0
    timeframe_nsvc = 0
    with open(log_file_name, mode='r') as csv_file:
        # support two temperature log line format:
        # in the older one the weather service name was not saved
        csv_fields = ['date_time', 'log_type', 'desc', 'old_temp_field', 'new_temp_field']
        for log_items in csv_dict(csv_file, fieldnames=csv_fields, delimiter=';'):
            # check the date range
            date_time = datetime.strptime(log_items["date_time"], '%Y-%m-%d %H:%M:%S,%f')
            if date_time.date() < date_start:
                continue
            if date_time.date() > date_end:
                break
            
            # search for temperature or boiler status log lines
            item_desc = log_items['desc']
            if item_desc != 'ext temp' and item_desc != 'boiler goes ON':
                continue
            
            if item_desc == 'boiler goes ON':
                # get the boiler activation date time
                activation_time.append(date_time)
                continue
            
            # get the date time of temperature disclosed by the weather service
            # fixing the log line format
            if log_items['new_temp_field'] is None:
                # old log line without weather service name
                log_temp = log_items['old_temp_field']
                svc = DEFAULT_SVC
            else:
                log_temp = log_items['new_temp_field']
                svc = log_items["old_temp_field"]
            if log_temp == '-':
                # the temperature was not disclosed
                continue
            current_temp = float(log_temp)
            if svc not in tempBySvc:
                # service doesn't exist: create a new entry
                tempBySvc[svc] = ([], [])  # (date_time_list, temp_list)
            tempBySvc[svc][0].append(date_time)
            tempBySvc[svc][1].append(current_temp)

            # compute the average time frame temperature
            # since the earlier version of boilerctrl.py didn't
            if svc == 'AVERAGE':
                # average time frame temperature has been already logged:
                # save timestamp and skip computation
                timeframe_avg_datetime_log = date_time
                continue  # skip average computation
            if date_time > timeframe_begin + timedelta(minutes=2):
                # close the time frame
                if timeframe_nsvc > 0:
                    timeframe_avg = round(timeframe_avg / timeframe_nsvc, 1)
                    if timeframe_avg_datetime_log is None:
                        # save as AVERAGE service
                        if 'AVERAGE' not in tempBySvc:
                            # AVERAGE service doesn't exist: create a new entry
                            tempBySvc['AVERAGE'] = ([], [])
                        tempBySvc['AVERAGE'][0].append(timeframe_begin)
                        tempBySvc['AVERAGE'][1].append(timeframe_avg)
                    else:
                        # AVERAGE has been already logged: compare the results
                        try:
                            timeframe_avg_log_idx = \
                                tempBySvc['AVERAGE'][0].index(timeframe_avg_datetime_log)
                        except ValueError:
                            print('AVERAGE: {} not found!'.format(timeframe_avg_datetime_log))
                        else:
                            timeframe_avg_log = tempBySvc['AVERAGE'][1][timeframe_avg_log_idx]
                            timeframe_delta = round(abs(timeframe_avg-timeframe_avg_log), 1)
                            if timeframe_delta > 0.1:
                                print('AVERAGE: values do not match at', timeframe_avg_datetime_log)
                                print('-- read {}, expected {}'.format(timeframe_avg_log, timeframe_avg))
                timeframe_begin = date_time
                timeframe_avg_datetime_log = None
                timeframe_avg = 0.0
                timeframe_nsvc = 0
            timeframe_avg = timeframe_avg + current_temp
            timeframe_nsvc = timeframe_nsvc + 1

    # At the end of the scan loop, close the last time frame
    if timeframe_nsvc > 0:
        timeframe_avg = round(timeframe_avg / timeframe_nsvc, 1)
        if timeframe_avg_datetime_log is None:
            # save as AVERAGE service
            if 'AVERAGE' not in tempBySvc:
                # AVERAGE service doesn't exist: create a new entry
                tempBySvc['AVERAGE'] = ([], [])
            tempBySvc['AVERAGE'][0].append(timeframe_begin)
            tempBySvc['AVERAGE'][1].append(timeframe_avg)


    #######################  P L O T  #######################
    if len(tempBySvc) == 0:
        print('Nothing to plot in the selected period!')
        return -1

    # Create the figure and the subplot for the temperatures line graph
    fig, ax = plt.subplots()

    # format the xaxis ticks
    if date_end == date_start:
        # format x-axis ticks by hours of the day
        plt.xticks(rotation='vertical')
        plt.subplots_adjust(bottom=.2)
        xfmt = mdates.DateFormatter('%H:%M')
        ax.xaxis.set_major_locator(mdates.HourLocator())
    else:
        # auto format x-axis ticks by date
        fig.autofmt_xdate()
        xfmt = mdates.DateFormatter('%Y-%m-%d')
    ax.xaxis.set_major_formatter(xfmt)

    # plot temperature
    color_idx = 0
    plot_color_set = ['green', 'brown', 'blue', 'orange']
    for svc_name in tempBySvc:
        if svc_name == 'AVERAGE':
            plot_width = 3
            plot_color = 'red'
        else:
            plot_width = 1  # default
            plot_color = plot_color_set[color_idx]
            color_idx = (color_idx + 1) % len(plot_color_set)
        ax.plot( tempBySvc[svc_name][0], tempBySvc[svc_name][1],
                    linewidth = plot_width, color=plot_color, label=svc_name )

    # plot a vertical line representing the activation time
    # see: https://stackoverflow.com/a/24988486
    activation_label = 'SwitchOn'
    for xc in activation_time:
        plt.axvline(x=xc, color='magenta', label=activation_label)
        activation_label = None  # Only one legend entry for all activation plot

    ax.set(ylabel='C degrees', title=plot_title)
    ax.grid()
    ax.legend()
    fig.savefig(plot_file_path)
    print('Temperature plot saved in', plot_file_path)
    return 0


def date_range_by_day(start_date, ndays):
    '''Generates dates, day by day, starting from `start_date`
    for `ndays`
    '''
    new_date = datetime.strptime(start_date, '%Y-%m-%d')
    day = timedelta(days=1)
    for _ in range(ndays):
        yield new_date.strftime('%Y-%m-%d')
        new_date = new_date + day


def main(argv):
    argc = len(argv)
    if argc < 4 or argc > 5:
        print('Sintax: {} <log_file_path> <plot_file_path> <start_date> [<end_date>]'
                                                .format(path.basename(argv[0])) )
        return -1

    # Set optional argument
    try:
        end_date = argv[4]
    except IndexError:
        end_date = None

    templot(argv[1], argv[2], argv[3], end_date)
    return 0


if __name__ == "__main__":
    log_file_name = 'boilerctrl-log.txt'
    plot_file_name = 'templot.png'

    script_path = path.abspath(__file__)
    working_dir = path.dirname(script_path)
    argv = [
        script_path,
        path.join(working_dir, log_file_name),
        path.join(working_dir, plot_file_name)
    ]
    #main(argv + ['2019-01-04', '2019-01-06'])
    main(argv + ['2019-01-13', '2019-01-14'])

    # plot temperature of the last 7 days
    #starting_day = (date.today() - timedelta(days=7)).strftime('%Y-%m-%d')
    #for plot_day in date_range_by_day(starting_day, 7):
    #    main(argv + [plot_day])
