#!/usr/bin/env python3
'''
Plot temperature trend grouped by weather services.
The temperature are read from the log file generated by boilerctrl.py script:
    <%Y-%m-%d %H:%M:%S,%f>;<log_type>;<description>;<service>;<float_temperature_value>

References:

Reading and Writing CSV Files in Python
Link: https://realpython.com/python-csv/

Plotting multiple Y values against multiple X values which are different timestamps
Link: https://stackoverflow.com/a/24815396

How to show date and time on x axis in matplotlib
Link: https://stackoverflow.com/a/32973263

Creating graph with date and time in axis labels with matplotlib
Link: https://matplotlib.org/gallery/text_labels_and_annotations/date.html
      https://stackoverflow.com/a/5502162

The MIT License (MIT)

Copyright (c) 2016 Corrado Ubezio

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''
from __future__ import print_function

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from os import path
from datetime import date
from datetime import datetime
from datetime import timedelta
from csv import DictReader as csv_dict


def templot(log_file_name, plot_file_path, plot_day=None):
    plot_title = 'Temperature plot'
    if plot_day is not None:
        print('Plot temperature of {} from file {}'.format(plot_day, log_file_name))
        search_date = datetime.strptime(plot_day, '%Y-%m-%d').date()
        plot_file_path, plot_file_ext = path.splitext(plot_file_path)
        plot_file_path = '{root}_{day}{ext}'.format( root=plot_file_path,
                                                     ext=plot_file_ext,
                                                     day=plot_day )
        plot_title = plot_title + ' of {}'.format(plot_day)
    else:
        # Plot full temperature history
        print('Plot temperature from file {}'.format(log_file_name))
    tempBySvc = {}
    activation_time = []
    with open(log_file_name, mode='r') as csv_file:
        csv_fields = ['date_time', 'log_type', 'desc', 'service', 'temp']
        for log_item in csv_dict(csv_file, fieldnames=csv_fields, delimiter=';'):
            item_desc = log_item['desc']
            if item_desc != 'ext temp' and item_desc != 'boiler goes ON':
                continue
            date_time = datetime.strptime(log_item["date_time"], '%Y-%m-%d %H:%M:%S,%f')
            if plot_day is not None:
                if date_time.date() != search_date:
                    continue
            if item_desc == 'boiler goes ON':
                activation_time.append(date_time)
                continue
            svc = log_item["service"]
            '''
            if svc == 'AVERAGE':
                # it's possible that the log doesn't contain an average row,
                # then the average in computed at the end
                continue
            '''
            if svc not in tempBySvc:
                # service doesn't exist
                # create a new item
                tempBySvc[svc] = ([], [])  # (date_time_list, temp_list)
            if log_item["temp"] == '-':
                # get last temperature from service list
                try:
                    current_temp = tempBySvc[svc][1][-1]
                except IndexError:
                    # the list is empty
                    current_temp = 0.0
            else:
                current_temp = float(log_item["temp"])
            tempBySvc[svc][0].append(date_time)
            tempBySvc[svc][1].append(current_temp)

    if len(tempBySvc) == 0:
        print('Nothing to plot in the selected period!')
        return -1

    '''
    # Compute the average temperature reported by each service at the same timestamp
    # assuming that the numbers of reports is the same for every service.

    # Get the reports number of a generic `tempBySvc` item.
    reports_num = len(next(iter(tempBySvc.values()))[0])
    svc_num = len(tempBySvc.values())
    average_t = [0] * reports_num
    timestamps = [''] * reports_num
    for svc_data in tempBySvc.values():
        for idx in range(len(svc_data[0])):
            # replace with the last service timestamp
            timestamps[idx] = svc_data[0][idx]

            # sum the average of the temperatures reported by the service
            # at each timestamp
            average_t[idx] = average_t[idx] + (svc_data[1][idx] / svc_num)
    tempBySvc['AVERAGE'] = (timestamps, average_t)
    '''

    # Create the figure and the subplot for the temperatures line graph
    fig, ax = plt.subplots()

    # format the xaxis ticks
    if plot_day == None:
        # plot full temperature history
        fig.autofmt_xdate()
        xfmt = mdates.DateFormatter('%Y-%m-%d')
    else:
        plt.xticks(rotation='vertical')
        plt.subplots_adjust(bottom=.2)
        xfmt = mdates.DateFormatter('%H:%M')
        ax.xaxis.set_major_locator(mdates.HourLocator())
    ax.xaxis.set_major_formatter(xfmt)

    # plot temperature
    color_idx = 0
    plot_color_set = ['green', 'brown', 'blue', 'orange']
    for svc_name in tempBySvc:
        if svc_name == 'AVERAGE':
            plot_width = 3
            plot_color = 'red'
        else:
            plot_width = 1  # default
            plot_color = plot_color_set[color_idx]
            color_idx = (color_idx + 1) % len(plot_color_set)
        ax.plot( tempBySvc[svc_name][0], tempBySvc[svc_name][1],
                    linewidth = plot_width, color=plot_color, label=svc_name )

    # plot a vertical line representing the activation time
    # see: https://stackoverflow.com/a/24988486
    activation_label = 'SwitchOn'
    for xc in activation_time:
        plt.axvline(x=xc, color='magenta', label=activation_label)
        activation_label = None  # Only one legend entry for all activation plot

    ax.set(ylabel='C degrees', title=plot_title)
    ax.grid()
    ax.legend()
    fig.savefig(plot_file_path)
    print('Temperature plot saved in', plot_file_path)
    return 0


def date_range_by_day(start_date, ndays):
    '''Generates dates, day by day, starting from `start_date`
    for `ndays`
    '''
    new_date = datetime.strptime(start_date, '%Y-%m-%d')
    day = timedelta(days=1)
    for _ in range(ndays):
        yield new_date.strftime('%Y-%m-%d')
        new_date = new_date + day


def main(argv):
    argc = len(argv)
    if argc < 3 or argc > 4:
        print('Sintax: {} <log_file_path> <plot_file_path> [<plot_day>]'.format(
            path.basename(argv[0]) )
        )
        return -1

    # Set optional argument
    try:
        plot_day = argv[3]
    except IndexError:
        plot_day = None

    templot(argv[1], argv[2], plot_day)
    return 0


if __name__ == "__main__":
    log_file_name = 'boilerctrl-log.txt'
    plot_file_name = 'templot.png'

    script_path = path.abspath(__file__)
    working_dir = path.dirname(script_path)
    argv = [
        script_path,
        path.join(working_dir, log_file_name),
        path.join(working_dir, plot_file_name)
    ]
    #main(argv)  # plot full temperature history

    # plot temperature of the last 7 days
    starting_day = (date.today() - timedelta(days=7)).strftime('%Y-%m-%d')
    for plot_day in date_range_by_day(starting_day, 7):
        main(argv + [plot_day])
